---
title: "leetcode-1109 解题报告"
date: 2019-07-09 23:13:37 +0800
categories: leetcode
---

# [题目描述](https://leetcode-cn.com/problems/corporate-flight-bookings/)

## 介绍
这里有 `n` 个航班，它们分别从 `1` 到 `n` 进行编号。    
我们这儿有一份航班预订表，表中第 `i` 条预订记录 `bookings[i] = [i, j, k]` 意味着我们在从 `i` 到 `j` 的每个航班上预订了 `k` 个座位。    
请你返回一个长度为 `n` 的数组 answer，按航班编号顺序返回每个航班上预订的座位数。

## 示例
```
输入：bookings = [[1,2,10],[2,3,20],[2,5,25]], n = 5
输出：[10,55,45,25,25]
```

# 解题思路

## 分析
参考了别人的思路-差分法，时间复杂度为O(n)。    
It's a nice idea, define an array `diff[i] = booking[i] - booking[i-1]`  that  `booking` represents seats number of each flight, that is the differ of continue two flight. 

## 代码
```
class Solution {
    public int[] corpFlightBookings(int[][] bookings, int n) {
        if (n < 0) return null;
        int[] diff = new int[n];
        if (bookings == null) {
            return diff;
        }
        // 差分法 
        //  diff[i] = res[i] - res[i-1]
        // 遇到 i至j之间的航班有k个值，只需要将边界的两处处理即可
        // 这样只需要再遍历一遍diff即可。
        
        for (int i = 0; i < bookings.length; i++) {
            int lo = bookings[i][0] - 1;
            int hi = bookings[i][1] - 1;
            int val = bookings[i][2];
            
            diff[lo] += val;
            if (hi < n - 1) {
                diff[hi + 1] -= val;
            }
        }
        
        for (int i = 1; i < n; i++) {
            diff[i] += diff[i-1];
        }
        return diff;
    }
}
```

# 参考文档
- 