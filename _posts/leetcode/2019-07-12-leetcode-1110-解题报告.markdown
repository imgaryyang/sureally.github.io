---
layout: article
key: 1bade025-aa8b-41d2-8db3-86a9a26b7eb0
title: "leetcode-1110-解题报告"
date: 2019-07-12 02:09:13 +0800
categories: leetcode
tags: leetcode
---

# [题目描述](https://leetcode-cn.com/problems/delete-nodes-and-return-forest/)
## 介绍
Given the `root` of a binary tree, each node in the tree has a distinct value.

After deleting all nodes with a value in `to_delete`, we are left with a forest (a disjoint union of trees).

Return the roots of the trees in the remaining forest.  You may return the result in any order.

## 示例
```
Input: root = [1,2,3,4,5,6,7], to_delete = [3,5]
Output: [[1,2,null,4],[6],[7]]
```

# 解题思路
## 分析
如果某节点待删除，则将两个子指针置空，同时需要将其父节点指向自己的连接置空。
递归解决。
## 代码
```
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<TreeNode> delNodes(TreeNode root, int[] to_delete) { 
        List<TreeNode> forest = new ArrayList<>(16);
        if (null == root) return forest;
        Set<Integer> toDeleteSet = new HashSet<>(16);
        for (int e : to_delete) {
            toDeleteSet.add(e);
        }
        root = delNodes(root, forest, toDeleteSet);
        if (null != root) forest.add(root);
        return forest;
    }
    
    public TreeNode delNodes(TreeNode root, List<TreeNode> forest, Set<Integer> toDeleteSet) {
        if (null == root) return null;
        root.left = delNodes(root.left, forest, toDeleteSet);
        root.right = delNodes(root.right, forest, toDeleteSet);      
        if (toDeleteSet.contains(root.val)) {
            if (null != root.left) forest.add(root.left);
            if (null != root.right) forest.add(root.right);
            return null;
        }
        return root;
    }
}
```

# 参考文档
- 