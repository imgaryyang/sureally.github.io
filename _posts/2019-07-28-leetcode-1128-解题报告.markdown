---
layout: article
title: "leetcode-1128-解题报告"
date: 2019-07-28 01:08:56 +0800
categories: leetcode
tags: leetcode
---

# [题目描述](https://leetcode-cn.com/problems/number-of-equivalent-domino-pairs/)
## 介绍
Given a list of `dominoes`, `dominoes[i] = [a, b]` is equivalent to `dominoes[j] = [c, d]` if and only if either (`a==c` and `b==d`), or (`a==d` and `b==c`) - that is, one domino can be rotated to be equal to another domino.

Return the number of pairs `(i, j)` for which `0 <= i < j < dominoes.length`, and `dominoes[i]` is equivalent to `dominoes[j]`.

Constraints:

- `1 <= dominoes.length <= 40000`
- `1 <= dominoes[i][j] <= 9`

## 示例

```
Input: dominoes = [[1,2],[2,1],[3,4],[5,6]]
Output: 1
```

# 解题思路
## 分析

## 代码

### 解题1

需要注意的是不能直接将数组作为key键放入map中，因为数组没有重写hashcode
以及equals的方法。

```
class Solution {
    class Dominoe {
        int[] dominoe;
        public Dominoe(int[] dominoe) {
            this.dominoe = dominoe;
        }
        
        public boolean equals(Object target) {
            if (!(target instanceof Dominoe)) {
                return false;
            }
            Dominoe t = (Dominoe) target;
            if (t.dominoe == null || this.dominoe == null || t.dominoe.length != this.dominoe.length) {
                return false;
            }
            for (int i = 0; i < this.dominoe.length; i++) {
                if (t.dominoe[i] != this.dominoe[i]) {
                    return false;
                }
            }
            return true;
        }
        
        @Override
        public int hashCode() {
            return Arrays.toString(this.dominoe).hashCode();
        }
    }
    public int numEquivDominoPairs(int[][] dominoes) {
        int ans = 0;
        Map<Dominoe, Integer> records = new HashMap<>(16);
        
        for (int[] dominoe : dominoes) {
            if (dominoe[1] < dominoe[0]) {
                dominoe[1] = dominoe[0] ^ dominoe[1];
                dominoe[0] = dominoe[0] ^ dominoe[1];
                dominoe[1] = dominoe[0] ^ dominoe[1];

            }
            Dominoe dd = new Dominoe(dominoe);
            int num = records.getOrDefault(dd, 0);
            records.put(dd, num + 1);
        }
        
        for (Integer num : records.values()) {
            ans += num * (num - 1) / 2;
        }
        return ans;
    }
}
```

### 解法2

第一种解法有点复杂，可以利用提出中给出的约束来进行简化。

```java
class Solution {
    public int numEquivDominoPairs(int[][] dominoes) {
        int ans = 0;
        // 1 <= dominoes[i][j] <= 9, 所以索引最大不超过9
        int[][] nums = new int[10][10];
        
        for (int[] dominoe : dominoes) {
            nums[dominoe[0]][dominoe[1]]++;
        }
        
        for (int i = 0; i < 10; i++) {
            for (int j = 0; j <= i; j++) {
                if (i != j) {
                    nums[i][j] += nums[j][i];
                }
                ans += nums[i][j] * (nums[i][j] - 1) / 2;
            }
        }
        return ans;
    }
}
```

# 参考文档
- 