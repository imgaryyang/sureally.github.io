---
layout: article
title:  "头条笔试题题解09-09日"
date:   2018-09-09 15:57:35 +0800
categories: written-test
---

#### 1. 最长不重复的字符串
```java
import java.util.HashSet;
import java.util.Scanner;
import java.util.Set;
/**
 * @ClassName Toutiao1
 * @Description
 * @Author shuWenjun
 * @Date 2018/9/9 10:07
 * @Version 1.0
 **/
public class Toutiao1 {
    public static void main(String[] args){
        Scanner sc = new Scanner(System.in);
        String str = sc.nextLine();
        sc.close();
        int ans = 0;
        for (int i = 0; i < str.length(); ++i){
            // 作为中间量，保存当前最长的不重复的字串，同时只需要长度，而需要记录字串具体是什么
            Set<Character> set = new HashSet<>(); 
            while (i < str.length() && !set.contains(str.charAt(i))){
                set.add(str.charAt(i));
                i++;
            }
            i = i - set.size();
            ans = Math.max(ans, set.size());
        }
        System.out.println(ans);
    }
}
```
#### 2. 寻找团队个数吧？，具体题目描述我忘了
示例：

**输入：**
```java
4
1 1 0 0
0 0 1 0
0 0 1 0
1 0 0 0
```
**输出：**  
`3`

**代码：**
```java
import java.util.Scanner;
/**
 * @ClassName TouTiao2
 * @Description 时间复杂度应该大于O(N^2)，空间复杂度O(N^2)。
 * @Author shuWenjun
 * @Date 2018/9/9 10:25
 * @Version 1.0
 **/
public class TouTiao2 {
    private static int M = 0;
    public static void main(String[] args){
        Scanner sc = new Scanner(System.in);
        M = sc.nextInt(); // [1,1000];
        int[][] teams = new int[M][M];
        for (int i = 0; i < M; ++i){
            for (int j = 0; j < M; ++j)
                teams[i][j] = sc.nextInt();
        }
        
        boolean[][] marked = new boolean[M][M]; // 标记是否访问过
        int ans = 0;
        for (int i = 0; i < M; ++i){
            for (int j = 0; j < M; ++j){
                if (dfs(teams, marked, i, j) > 0) ans++; // 深度递归标记点。
            }
        }
        System.out.println(ans);
    }
    private static int dfs(int[][] teams, boolean[][] marked, int i, int j){
        if (i < 0 || i >= M || j < 0 || j >= M) return 0;
        if (marked[i][j]) return 0;
        if (teams[i][j] == 0) return 0; //
        marked[i][j] = true;
        return dfs(teams, marked, i + 1, j) +
                dfs(teams, marked, i - 1, j) +
                dfs(teams, marked, i, j + 1) +
                dfs(teams, marked, i, j - 1) + 1;
    }
}

```
#### 3. IP地址个数
**分析：**
这题是LeetCode改变而成，我做过所以比较熟悉。
更好的代码参见LeetCode
#### 4. 判断是不是Unicode编码的结果
**分析：**  
直接模拟就可以了。但是，题目的示例是错的，具体是什么我忘记了。  
如果合法输出1，否则输出0。

**代码：**
```java
import java.util.Scanner;
/**
 * @ClassName TouTiao4
 * @Description
 * @Author shuWenjun
 * @Date 2018/9/9 10:59
 * @Version 1.0
 **/
public class TouTiao4 {
    public static void main(String[] args){
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int[] nums = new int[N];
        for (int i = 0; i < N; ++i){
            int tmp = sc.nextInt();
            tmp = tmp & 255; // 取低八位
            nums[i] = tmp;
        }
        sc.close();
        // 只有一个数时
        if (N == 1){
            String binary = Integer.toBinaryString(nums[0]);
            if (binary.length() > 7){
                System.out.println(0);
                return;
            }
        }
        // 构造第一个数的前缀。（应该题目有问题，照描述来看，应该是N个1，然鹅通不过，就改为了N-1，就通过了。
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < N-1; i++){
            sb.append(1);
        }
        sb.append(0);
        if (N > 1){
            String binary = Integer.toBinaryString(nums[0]);
            if (binary.length() != 8 || !binary.substring(0, sb.toString().length()).equals(sb.toString())){
                System.out.println(0);
                return;
            }
        }
        for (int i = 1; i < N; i++) {
            String binary = Integer.toBinaryString(nums[i]);
            if (binary.length() != 8 || !binary.substring(0, 2).equals("10")) {
                System.out.println(0);
                return;
            }
        }
        // 符合要求
        System.out.println(1);
    }
}
```

#### 5. 抖音网红
**分析：**
题意是（A，B）表示A关注B，然后如果（B, C），那么A间接关注了C。 建立一个关系图，表示B指向A，C指向B的有向图，然后深度递归，看是否
能够访问所有的点，即可。  
时间复杂度O(N^2)，时间复杂度和空间复杂度都比较高。  

**代码：**
```java
import java.util.*;

/**
 * @ClassName TouTiao5
 * @Description
 * @Author shuWenjun
 * @Date 2018/9/9 11:45
 * @Version 1.0
 **/
public class TouTiao5 {
    private static HashMap<Integer, Set<Integer>> memo;
    private static int N = 0;
    public static void main(String[] args){
        Scanner sc = new Scanner(System.in);
        N = sc.nextInt();
        int M = sc.nextInt();
        Map<Integer, Set<Integer>> re_pairs = new HashMap<>(); // 建立关系网
        for (int i = 0; i < M; ++i){
            int one = sc.nextInt();
            int two = sc.nextInt();
            Set<Integer> set = re_pairs.getOrDefault(two, new HashSet<>());
            set.add(one);
            re_pairs.put(two, set);
        }
        sc.close();

        int ans = 0;
        Map<Integer, Integer> counts = new HashMap<>();
        memo = new HashMap<>();
        for (int i = 1; i <= N; i++){
            Set<Integer> visited = new HashSet<>();
            dfs(re_pairs, visited, i);
            memo.put(i, visited);
            if (visited.size() >= N) ans++; // 关系网为N，抖音网红+1，其中包括了自己。
        }
        System.out.println(ans);
    }
    
    private static void dfs(Map<Integer, Set<Integer>> re_pairs, Set<Integer> visited, int now){
        if (visited.contains(now)) return;
        // 如果加入下面这个，以空间换时间
        if (memo.containsKey(now)){
            visited.addAll(memo.get(now));
        }
        visited.add(now);
        for (int next : re_pairs.getOrDefault(now, new HashSet<>())){
            dfs(re_pairs, visited, next);
        }
    }
}
```
