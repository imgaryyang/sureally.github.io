---
layout: article
title: 静态代理和动态代理
date: 2019/10/6 00:25
categories: Java
---


# 代理
## 简介
Proxy代理是一种结构型设计模式，主要解决的问题是：在直接代理对象时带来的问题。其目的是为其他对象提供一个代理以控制对某个对象的访问。

代理类复杂为委托类预处理消息，过滤消息并转发消息，以及进行消息被委托类执行后的后续处理。

## 分类
按照代理的创建时期，代理类可以分为
- 静态代理
>在程序运行前代理类的.class文件就已经存在了。

- 动态代理
>在程序运行时动态创建而成。

动态代理又分为两类
- 基于JDK的动态代理
>基于反射机制实现的，必须是目标类基于统一接口。在生成类的过程中更加高效。
- 基于cglib的动态代理
>底层则是借助asm来实现的。在生成类之后的执行过程中更加高效。通过继承的方法来实现的动态代理的。




# 静态代理示例

## 抽象接口

```java
package proxy;

/**
 * @Author shu wj
 * @Date 2019/10/5 22:44
 * @Description
 */
public interface UserManager {

  void addUser(String userId, String userName);
}

```

## 具体实现类
```java
package proxy;

/**
 * @Author shu wj
 * @Date 2019/10/5 22:44
 * @Description
 */
public class UserManagerImpl implements UserManager {

  public void addUser(String userId, String userName) {
    System.out.println("UserManagerImpl.addUser");
  }
}

```

## 代理用户实现类
```java
package proxy;

/**
 * @Author shu wj
 * @Date 2019/10/5 22:46
 * @Description
 */
public class UserManagerImplProxy implements UserManager {

  // 目标对象
  private UserManager userManager;

  // 通过构造方法传入目标对象
  public UserManagerImplProxy(UserManager userManager) {
    this.userManager = userManager;
  }

  public void addUser(String userId, String userName) {
    System.out.println("start-->addUser()");
    userManager.addUser(userId, userName);
    System.out.println("success-->addUser()");
  }
}

```

## 客户端调用
```java
package proxy;

/**
 * @Author shu wj
 * @Date 2019/10/5 22:48
 * @Description
 */
public class Client {
  public static void main(String[] args) {
    UserManager userManager = new UserManagerImplProxy(new UserManagerImpl());

    userManager.addUser("12", "ss");
  }
}

```

## 静态代理优缺点
### 优点
代理使客户端不需要知道实现类是什么，怎么做的，而客户端只需知道代理即可（解耦合），对于如上的客户端代码，newUserManagerImpl()可以应用工厂将它隐藏。

### 缺点
1. 代理类和委托类实现了相同的接口，代理类通过委托类实现了相同的方法。这样就出现了大量的代码重复。如果接口增加一个方法，除了所有实现类需要实现这个方法外，所有代理类也需要实现此方法。增加了代码维护的复杂度。

2. 代理对象只服务于一种类型的对象，如果要服务多类型的对象，需要为每一种对象都进行代理，静态代理在程序规模稍大时就无法胜任了。


# JDK的动态代理

## 动态创建代理对象的类
>通过LogHandler代理不同类型的对象，如果把对外的接口都通过动态代理来实现，那么所有的函数调用最终都会经过invoke函数的转发，因此可以在这里做一些自己想做的操作，比如日志系统、事务、拦截器、权限控制等。这也就是AOP(面向切面编程)的基本原理。

```java
package proxy;

import java.lang.reflect.InvocationHandler;
import java.lang.reflect.Method;
import java.lang.reflect.Proxy;

/**
 * @Author shu wj
 * @Date 2019/10/5 23:03
 * @Description
 */
public class LogHandler implements InvocationHandler {
  // 目标对象
  private Object targetObject;

  // 绑定关系, 关联到哪个接口的哪些方法将被调用时，执行invoke方法
  public Object newProxyInstance(Object targetObject) {
    this.targetObject = targetObject;
    // 该方法用于为指定类加载器、一组接口及调用处理器生成动态代理类的实例
    // 第一个参数：指定产生对象代理对象的类加载器，需要将其指定为和目标对象同一个类加载器
    // 第二个参数：实现和目标对象一样的接口，需要拿到目标对象的实现接口
    // 第三个参数：表明这些被拦截的方法在被拦截时需要执行哪个InvocationHandler的invoke方法
    // 根据传入的目标返回一个代理对象
    return Proxy.newProxyInstance(targetObject.getClass().getClassLoader(), new Class[]{UserManager.class}, this);
  }

  // InvocationHandler接口的方法，proxy表示代理，method表示原对象被调用的方法，args表示方法的参数
  public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
    System.out.println("start-->>");
    for (Object arg : args) {
      System.out.println(arg);
    }
    Object ret = null;
    try {
      /*原对象方法调用前处理日志信息*/
      System.out.println("start-->>");

      //调用目标方法
      ret = method.invoke(targetObject, args);
      /*原对象方法调用后处理日志信息*/
      System.out.println("success-->>");
    } catch (Exception e) {
      e.printStackTrace();
      System.out.println("error-->>");
      throw e;
    }
    return ret;
  }

  ;
}

```

## 客户端调用
```java
package proxy;

/**
 * @Author shu wj
 * @Date 2019/10/5 22:48
 * @Description
 */
public class Client {
  public static void main(String[] args) {
//    UserManager userManager = new UserManagerImplProxy(new UserManagerImpl());
    LogHandler logHandler = new LogHandler();
    UserManager userManager = (UserManager) logHandler.newProxyInstance(new UserManagerImpl());
    userManager.addUser("12", "ss");
  }
}

```

# Cglib动态代理实现

## 简介
Cglib是一个优秀的动态代理框架，它的底层使用ASM在内存中动态的生成被代理类的子类，使用CGLIB即使代理类没有实现任何接口也可以实现动态代理功能。CGLIB具有简单易用，它的运行速度要远远快于JDK的Proxy动态代理。

>ASM是一个Java字节码操纵框架，它能被用来动态生成类或者增强既有类的功能.


## CGlib的核心类

- 增强类 
 `net.sf.cglib.proxy.Enhancer`
- 方法拦截类
`net.sf.cglib.proxy.MethodInterceptor`  ，它是Callback接口的子接口，需要用户实现.
- JDK的java.lang.reflect.Method类的代理类
`net.sf.cglib.proxy.MethodProxy`    
    可以方便的实现对原对象方法的调用,如使用
    ```
    Object o = methodProxy.invokeSuper(proxy, args);//虽然第一个参数是被代理对象，也不会出现死循环的问题。
    ```
- `net.sf.cglib.proxy.MethodInterceptor接口`
是最通用的回调（callback）类型,
它经常被基于代理的AOP用来实现拦截（intercept）方法的调用。这个接口只定义了一个方法
```
public Object intercept(Object object, java.lang.reflect.Method method,
Object[] args, MethodProxy proxy) throws Throwable;
```
## 实现原理
> cglib是通过继承的方式来对类进行代理，因此只能代理非final方法，同时在代理调用方法时，通过`FastClass`机制来代替JDK中通过反射查找方法的机制来加快方法的调用，`FastClass`机制则是通过对函数进行签名和建立索引来快速找到方法，相当于一个`Map<Index, Method>`。
> 继承父类所有的公开方法，然后可以重写这些方法，在重写时对这些方法增强，这就是cglib的思想。根据里氏代换原则（LSP），父类需要出现的地方，子类可以出现，所以cglib实现的代理也是可以被正常使用的.

### 代理类源码分析

```java
//
// Source code recreated from a .class file by IntelliJ IDEA
// (powered by Fernflower decompiler)
//

package proxy;

import java.lang.reflect.Method;
import net.sf.cglib.core.ReflectUtils;
import net.sf.cglib.core.Signature;
import net.sf.cglib.proxy.Callback;
import net.sf.cglib.proxy.Factory;
import net.sf.cglib.proxy.MethodInterceptor;
import net.sf.cglib.proxy.MethodProxy;

// cglib通过继承的方式来实现对没有接口的类进行代理，而JDK是通过implements的方式
// 因此对enhancer.create() 进行强制类型转换，因为UserManger是代理类的父类
// 因为是继承的缘故，如果需要代理的类存在final的方法便不能被重写。
public class UserManagerImpl$$EnhancerByCGLIB$$228f0aba extends UserManagerImpl implements Factory {
  private boolean CGLIB$BOUND;
  public static Object CGLIB$FACTORY_DATA;
  private static final ThreadLocal CGLIB$THREAD_CALLBACKS;
  private static final Callback[] CGLIB$STATIC_CALLBACKS;
  private MethodInterceptor CGLIB$CALLBACK_0;
  private static Object CGLIB$CALLBACK_FILTER;
  private static final Method CGLIB$addUser$0$Method;
  private static final MethodProxy CGLIB$addUser$0$Proxy;
  private static final Object[] CGLIB$emptyArgs;
  private static final Method CGLIB$equals$1$Method;
  private static final MethodProxy CGLIB$equals$1$Proxy;
  private static final Method CGLIB$toString$2$Method;
  private static final MethodProxy CGLIB$toString$2$Proxy;
  private static final Method CGLIB$hashCode$3$Method;
  private static final MethodProxy CGLIB$hashCode$3$Proxy;
  private static final Method CGLIB$clone$4$Method;
  private static final MethodProxy CGLIB$clone$4$Proxy;

  static void CGLIB$STATICHOOK1() {
    CGLIB$THREAD_CALLBACKS = new ThreadLocal();
    CGLIB$emptyArgs = new Object[0];
    Class var0 = Class.forName("proxy.UserManagerImpl$$EnhancerByCGLIB$$228f0aba");
    Class var1;
    CGLIB$addUser$0$Method = ReflectUtils.findMethods(new String[]{"addUser", "(Ljava/lang/String;Ljava/lang/String;)V"}, (var1 = Class.forName("proxy.UserManagerImpl")).getDeclaredMethods())[0];
    CGLIB$addUser$0$Proxy = MethodProxy.create(var1, var0, "(Ljava/lang/String;Ljava/lang/String;)V", "addUser", "CGLIB$addUser$0");
    Method[] var10000 = ReflectUtils.findMethods(new String[]{"equals", "(Ljava/lang/Object;)Z", "toString", "()Ljava/lang/String;", "hashCode", "()I", "clone", "()Ljava/lang/Object;"}, (var1 = Class.forName("java.lang.Object")).getDeclaredMethods());
    CGLIB$equals$1$Method = var10000[0];
    CGLIB$equals$1$Proxy = MethodProxy.create(var1, var0, "(Ljava/lang/Object;)Z", "equals", "CGLIB$equals$1");
    CGLIB$toString$2$Method = var10000[1];
    CGLIB$toString$2$Proxy = MethodProxy.create(var1, var0, "()Ljava/lang/String;", "toString", "CGLIB$toString$2");
    CGLIB$hashCode$3$Method = var10000[2];
    CGLIB$hashCode$3$Proxy = MethodProxy.create(var1, var0, "()I", "hashCode", "CGLIB$hashCode$3");
    CGLIB$clone$4$Method = var10000[3];
    CGLIB$clone$4$Proxy = MethodProxy.create(var1, var0, "()Ljava/lang/Object;", "clone", "CGLIB$clone$4");
  }

  final void CGLIB$addUser$0(String var1, String var2) {
    super.addUser(var1, var2);
  }

  public final void addUser(String var1, String var2) {
    MethodInterceptor var10000 = this.CGLIB$CALLBACK_0;
    if (var10000 == null) {
      CGLIB$BIND_CALLBACKS(this);
      var10000 = this.CGLIB$CALLBACK_0;
    }

    if (var10000 != null) {
      var10000.intercept(this, CGLIB$addUser$0$Method, new Object[]{var1, var2}, CGLIB$addUser$0$Proxy);
    } else {
      super.addUser(var1, var2);
    }
  }

  final boolean CGLIB$equals$1(Object var1) {
    return super.equals(var1);
  }

  public final boolean equals(Object var1) {
    MethodInterceptor var10000 = this.CGLIB$CALLBACK_0;
    if (var10000 == null) {
      CGLIB$BIND_CALLBACKS(this);
      var10000 = this.CGLIB$CALLBACK_0;
    }

    if (var10000 != null) {
      Object var2 = var10000.intercept(this, CGLIB$equals$1$Method, new Object[]{var1}, CGLIB$equals$1$Proxy);
      return var2 == null ? false : (Boolean)var2;
    } else {
      return super.equals(var1);
    }
  }

  final String CGLIB$toString$2() {
    return super.toString();
  }

  public final String toString() {
    MethodInterceptor var10000 = this.CGLIB$CALLBACK_0;
    if (var10000 == null) {
      CGLIB$BIND_CALLBACKS(this);
      var10000 = this.CGLIB$CALLBACK_0;
    }

    return var10000 != null ? (String)var10000.intercept(this, CGLIB$toString$2$Method, CGLIB$emptyArgs, CGLIB$toString$2$Proxy) : super.toString();
  }

  final int CGLIB$hashCode$3() {
    return super.hashCode();
  }

  public final int hashCode() {
    MethodInterceptor var10000 = this.CGLIB$CALLBACK_0;
    if (var10000 == null) {
      CGLIB$BIND_CALLBACKS(this);
      var10000 = this.CGLIB$CALLBACK_0;
    }

    if (var10000 != null) {
      Object var1 = var10000.intercept(this, CGLIB$hashCode$3$Method, CGLIB$emptyArgs, CGLIB$hashCode$3$Proxy);
      return var1 == null ? 0 : ((Number)var1).intValue();
    } else {
      return super.hashCode();
    }
  }

  final Object CGLIB$clone$4() throws CloneNotSupportedException {
    return super.clone();
  }

  protected final Object clone() throws CloneNotSupportedException {
    MethodInterceptor var10000 = this.CGLIB$CALLBACK_0;
    if (var10000 == null) {
      CGLIB$BIND_CALLBACKS(this);
      var10000 = this.CGLIB$CALLBACK_0;
    }

    return var10000 != null ? var10000.intercept(this, CGLIB$clone$4$Method, CGLIB$emptyArgs, CGLIB$clone$4$Proxy) : super.clone();
  }

  public static MethodProxy CGLIB$findMethodProxy(Signature var0) {
    String var10000 = var0.toString();
    switch(var10000.hashCode()) {
    case -508378822:
      if (var10000.equals("clone()Ljava/lang/Object;")) {
        return CGLIB$clone$4$Proxy;
      }
      break;
    case 1826985398:
      if (var10000.equals("equals(Ljava/lang/Object;)Z")) {
        return CGLIB$equals$1$Proxy;
      }
      break;
    case 1913648695:
      if (var10000.equals("toString()Ljava/lang/String;")) {
        return CGLIB$toString$2$Proxy;
      }
      break;
    case 1917756541:
      if (var10000.equals("addUser(Ljava/lang/String;Ljava/lang/String;)V")) {
        return CGLIB$addUser$0$Proxy;
      }
      break;
    case 1984935277:
      if (var10000.equals("hashCode()I")) {
        return CGLIB$hashCode$3$Proxy;
      }
    }

    return null;
  }

  public UserManagerImpl$$EnhancerByCGLIB$$228f0aba() {
    CGLIB$BIND_CALLBACKS(this);
  }

  public static void CGLIB$SET_THREAD_CALLBACKS(Callback[] var0) {
    CGLIB$THREAD_CALLBACKS.set(var0);
  }

  public static void CGLIB$SET_STATIC_CALLBACKS(Callback[] var0) {
    CGLIB$STATIC_CALLBACKS = var0;
  }

  private static final void CGLIB$BIND_CALLBACKS(Object var0) {
    UserManagerImpl$$EnhancerByCGLIB$$228f0aba var1 = (UserManagerImpl$$EnhancerByCGLIB$$228f0aba)var0;
    if (!var1.CGLIB$BOUND) {
      var1.CGLIB$BOUND = true;
      Object var10000 = CGLIB$THREAD_CALLBACKS.get();
      if (var10000 == null) {
        var10000 = CGLIB$STATIC_CALLBACKS;
        if (var10000 == null) {
          return;
        }
      }

      var1.CGLIB$CALLBACK_0 = (MethodInterceptor)((Callback[])var10000)[0];
    }

  }

  public Object newInstance(Callback[] var1) {
    CGLIB$SET_THREAD_CALLBACKS(var1);
    UserManagerImpl$$EnhancerByCGLIB$$228f0aba var10000 = new UserManagerImpl$$EnhancerByCGLIB$$228f0aba();
    CGLIB$SET_THREAD_CALLBACKS((Callback[])null);
    return var10000;
  }

  public Object newInstance(Callback var1) {
    CGLIB$SET_THREAD_CALLBACKS(new Callback[]{var1});
    UserManagerImpl$$EnhancerByCGLIB$$228f0aba var10000 = new UserManagerImpl$$EnhancerByCGLIB$$228f0aba();
    CGLIB$SET_THREAD_CALLBACKS((Callback[])null);
    return var10000;
  }

  public Object newInstance(Class[] var1, Object[] var2, Callback[] var3) {
    CGLIB$SET_THREAD_CALLBACKS(var3);
    UserManagerImpl$$EnhancerByCGLIB$$228f0aba var10000 = new UserManagerImpl$$EnhancerByCGLIB$$228f0aba;
    switch(var1.length) {
    case 0:
      var10000.<init>();
      CGLIB$SET_THREAD_CALLBACKS((Callback[])null);
      return var10000;
    default:
      throw new IllegalArgumentException("Constructor not found");
    }
  }

  public Callback getCallback(int var1) {
    CGLIB$BIND_CALLBACKS(this);
    MethodInterceptor var10000;
    switch(var1) {
    case 0:
      var10000 = this.CGLIB$CALLBACK_0;
      break;
    default:
      var10000 = null;
    }

    return var10000;
  }

  public void setCallback(int var1, Callback var2) {
    switch(var1) {
    case 0:
      this.CGLIB$CALLBACK_0 = (MethodInterceptor)var2;
    default:
    }
  }

  public Callback[] getCallbacks() {
    CGLIB$BIND_CALLBACKS(this);
    return new Callback[]{this.CGLIB$CALLBACK_0};
  }

  public void setCallbacks(Callback[] var1) {
    this.CGLIB$CALLBACK_0 = (MethodInterceptor)var1[0];
  }

  static {
    CGLIB$STATICHOOK1();
  }
}

```

### MethodProxy及FastClass机制分析
在CGlib反编译代码中这样生成Proxy对象

在`UserManagerImpl$$EnhancerByCGLIB$$228f0aba`中
```java
    Class var0 = Class.forName("proxy.UserManagerImpl$$EnhancerByCGLIB$$228f0aba");
    Class var1;
    CGLIB$addUser$0$Method = ReflectUtils.findMethods(new String[]{"addUser", "(Ljava/lang/String;Ljava/lang/String;)V"}, (var1 = Class.forName("proxy.UserManagerImpl")).getDeclaredMethods())[0];
    CGLIB$addUser$0$Proxy = MethodProxy.create(var1, var0, "(Ljava/lang/String;Ljava/lang/String;)V", "addUser", "CGLIB$addUser$0");
```
进入create方法
```java
    /**
     * For internal use by {@link Enhancer} only; see the {@link net.sf.cglib.reflect.FastMethod} class
     * for similar functionality.
     */
     // c1 是被代理的类，c2是cglib生成的代理类
    public static MethodProxy create(Class c1, Class c2, String desc, String name1, String name2) {
        MethodProxy proxy = new MethodProxy();
        /**Signature:
         * A representation of a method signature, containing the method name,
         * return type, and parameter types.
         * 函数签名，保存了方法的名字，返回值类型和参数类型
         */
        proxy.sig1 = new Signature(name1, desc);
        proxy.sig2 = new Signature(name2, desc);
        proxy.createInfo = new CreateInfo(c1, c2);
        return proxy;
    }
```



在MethodProxy中，在代理类中使用的是
`proxy.invokeSuper(obj, args)`来调用被代理方法.
```java
/**
     * Invoke the original (super) method on the specified object.
     * @param obj the enhanced object, must be the object passed as the first
     * argument to the MethodInterceptor
     * @param args the arguments passed to the intercepted method; you may substitute a different
     * argument array as long as the types are compatible
     * @see MethodInterceptor#intercept
     * @throws Throwable the bare exceptions thrown by the called method are passed through
     * without wrapping in an <code>InvocationTargetException</code>
     */
    public Object invokeSuper(Object obj, Object[] args) throws Throwable {
        try {
            init();
            FastClassInfo fci = fastClassInfo;
            
            // invoke 是抽象类FastClass中的方法
            return fci.f2.invoke(fci.i2, obj, args);
        } catch (InvocationTargetException e) {
            throw e.getTargetException();
        }
    }
```



```java
    private void init()
    {
        /* 
         * Using a volatile invariant allows us to initialize the FastClass and
         * method index pairs atomically.
         * 
         * Double-checked locking is safe with volatile in Java 5.  Before 1.5 this 
         * code could allow fastClassInfo to be instantiated more than once, which
         * appears to be benign.
         */
        if (fastClassInfo == null)
        {
        // 双重检查保证fastClassInfo只被初始化一次
            synchronized (initLock)
            {
                if (fastClassInfo == null)
                {
                    CreateInfo ci = createInfo;

                    FastClassInfo fci = new FastClassInfo();
                    // helper函数生成c1和c2的FastClass的类对象
                    fci.f1 = helper(ci, ci.c1);
                    fci.f2 = helper(ci, ci.c2);
                    // i1和i2的全称可以看作是index1,index2
                    //　在JDK版本中，是通过反射的机制来获取method，这样效率比较低下
                    //　所以cglib通过对Signature建立索引来对加快对method的寻址,getIndex下面介绍
                    fci.i1 = fci.f1.getIndex(sig1);
                    fci.i2 = fci.f2.getIndex(sig2);
                    fastClassInfo = fci;
                    createInfo = null;
                }
            }
        }
    }
```

在`UserManagerImpl$$EnhancerByCGLIB$$228f0aba$$FastClassByCGLIB$$f800da22`
```java
//现在介绍下getIndex方法，FastClass方法中的getIndex方法是抽象方法
//cglib同时生成了一个继承自FastClass的类，重写了其getIndex方法
public int getIndex(Signature var1) {
    String var10000 = var1.toString();
    switch(var10000.hashCode()) {
    case -2055565910:
      if (var10000.equals("CGLIB$SET_THREAD_CALLBACKS([Lnet/sf/cglib/proxy/Callback;)V")) {
        return 17;
      }
      break;
    case -1882565338:
      if (var10000.equals("CGLIB$equals$1(Ljava/lang/Object;)Z")) {
        return 8;
      }
      break;
    ...
}


```

在`UserManagerImpl$$FastClassByCGLIB$$dbc40b02`
```java
// 同样的，invoke方法也是FastClass的抽象方法，被cglib生成的继承了FastClass的类重写
//　通过index2的值，直接调用方法，省去了反射的时间消耗

public Object invoke(int var1, Object var2, Object[] var3) throws InvocationTargetException {
    UserManagerImpl var10000 = (UserManagerImpl)var2;
    int var10001 = var1;

    try {
      switch(var10001) {
      case 0:
        var10000.addUser((String)var3[0], (String)var3[1]);
        return null;
      case 1:
        return new Boolean(var10000.equals(var3[0]));
      case 2:
        return var10000.toString();
      case 3:
        return new Integer(var10000.hashCode());
      }
    } catch (Throwable var4) {
      throw new InvocationTargetException(var4);
    }

    throw new IllegalArgumentException("Cannot find matching method/constructor");
  }
```


## 实现举例
### 动态创建的代理类
```java
package proxy;

import java.lang.reflect.Method;

import net.sf.cglib.proxy.MethodInterceptor;
import net.sf.cglib.proxy.MethodProxy;

/**
 * @Author shu wj
 * @Date 2019/10/5 23:26
 * @Description
 */
public class UserManagerImplCglibProxy implements MethodInterceptor {

  /**
   *
   * @param o 代理对象
   * @param method 拦截的方法
   * @param args 方法的参数
   * @param methodProxy java.lang.reflect.Method类的代理类
   * @return
   * @throws Throwable
   */
  public Object intercept(Object o, Method method, Object[] args, MethodProxy methodProxy) throws Throwable {
    System.out.println("start-->>");
    for (Object arg : args) {
      System.out.println(arg);
    }
    Object ret = null;
    try {
      /*原对象方法调用前处理日志信息*/
      System.out.println("start-->>");

      //调用目标方法
      ret = methodProxy.invokeSuper(o, args);
      /*原对象方法调用后处理日志信息*/
      System.out.println("success-->>");
    } catch (Exception e) {
      e.printStackTrace();
      System.out.println("error-->>");
      throw e;
    }
    return ret;
  }
}
```

### 客户端调用
```java
package proxy;

import net.sf.cglib.proxy.Enhancer;

/**
 * @Author shu wj
 * @Date 2019/10/5 22:48
 * @Description
 */
public class Client {
  public static void main(String[] args) {
//    UserManager userManager = new UserManagerImplProxy(new UserManagerImpl());
//    LogHandler logHandler = new LogHandler();
//    UserManager userManager = (UserManager) logHandler.newProxyInstance(new UserManagerImpl());

    UserManagerImplCglibProxy cglibProxy = new UserManagerImplCglibProxy();
    Enhancer enhancer = new Enhancer();
    enhancer.setSuperclass(UserManagerImpl.class);
    enhancer.setCallback(cglibProxy);

    UserManager userManager = (UserManager) enhancer.create();

    userManager.addUser("12", "ss");
  }
}

```

PS：现在的Springboot默认是基于CGlib实现的AOP。

# 参考文档
- https://www.cnblogs.com/maohuidong/p/7992894.html
- https://www.jianshu.com/p/a03828227fdc
- https://www.jianshu.com/p/acd313944654


